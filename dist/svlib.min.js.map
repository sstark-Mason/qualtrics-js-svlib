{"version":3,"file":"svlib.min.js","sources":["../node_modules/anylogger/anylogger.cjs.js","../src/questionFeedback.js","../src/main.js"],"sourcesContent":["/**\n *  A  N  Y  L  O  G  G  E  R\n *  Get a logger. Any logger.\n *\n *  ¬© 2020 by Stijn de Witt, some rights reserved\n *  Licensed under the MIT Open Source license\n *  https://opensource.org/licenses/MIT\n */\n\n // stores loggers keyed by name\nvar loggers = Object.create(null);\n\n/**\n * anylogger([name] [, options]) => function logger([level='log'] [, ...args])\n *\n * The main `anylogger` function creates a new or returns an existing logger\n * with the given `name`. It maintains a registry of all created loggers,\n * which it returns when called without a name, or with an empty name.\n *\n * If anylogger needs to create a new logger, it invokes\n * [`anylogger.new`](#anyloggernew).\n *\n * @param name {String} The name of the logger to create\n * @param options {Object} An optional options object\n *\n * @returns A logger with the given `name` and `options`.\n */\nvar anylogger = function(name, options){\n  // return the existing logger, or create a new one. if no name was given, return all loggers\n  return name ? loggers[name] || (loggers[name] = anylogger.ext(anylogger.new(name, options))) : loggers\n};\n\n/**\n * `anylogger.levels`\n *\n * An object containing a mapping of level names to level values.\n *\n * To be compliant with the anylogger API, loggers should support at least\n * the log methods corresponding to the default levels, but they may define\n * additional levels and they may choose to use different numeric values\n * for all the levels.\n *\n * The guarantees the Anylogger API makes are:\n * - there is a logging method corresponding to each level listed in anylogger.levels\n * - the levels error, warn, info, log, debug and trace are always there\n * - each level corresponds to a numeric value\n *\n * Note that the Anylogger API explicitly does not guarantee that all levels\n * have distinct values or that the numeric values will follow any pattern\n * or have any specific order. For this reason it is best to think of levels\n * as separate log channels, possibly going to different output locations.\n *\n * You can replace or change this object to include levels corresponding with\n * those available in the framework you are writing an adapter for. Please\n * make sure to always include the default levels as well so all code can\n * rely on the 6 console methods `error`, `warn`, `info`, `log`, `debug` and\n * `trace` to always be there.\n */\nanylogger.levels = { error: 1, warn: 2, info: 3, log: 4, debug: 5, trace: 6 };\n\n/**\n * `anylogger.new(name, options)`\n *\n * Creates a new logger function that calls `anylogger.log` when invoked.\n *\n * @param name {String} The name of the logger to create\n * @param options {Object} An optional options object\n *\n * @returns A new logger function with the given `name`.\n */\nanylogger.new = function(name, options) {\n  var result = {};\n  result[name] = function() {anylogger.log(name, [].slice.call(arguments));};\n  // some old browsers dont'create the function.name property. polyfill it for those\n  try {Object.defineProperty(result[name], 'name', {get:function(){return name}});} catch(e) {}\n  return result[name]\n};\n\n/**\n * `anylogger.log(name, args)`\n *\n * The log function used by the logger created by `anylogger.new`.\n *\n * You can override this method to change invocation behavior.\n *\n * @param name {String} The name of the logger to use. Required. Not empty.\n * @param args {Array} The log arguments. Required. May be empty.\n *\n * If multiple arguments were given in `args` and the first argument is a\n * log level name from anylogger.levels, this method will remove that argument\n * and call the corresponding log method with the remaining arguments.\n * Otherwise it will call the `log` method with the arguments given.\n */\nanylogger.log = function(name, args) {\n  var level = args.length > 1 && anylogger.levels[args[0]] ? args.shift() : 'log';\n  loggers[name][level].apply(loggers[name], args);\n};\n\n/**\n * `anylogger.ext(logger) => logger`\n *\n * Called when a logger needs to be extended, either because it was newly\n * created, or because it's configuration or settings changed in some way.\n *\n * This method must ensure that a log method is available on the logger for\n * each level in `anylogger.levels`.\n *\n * When overriding `anylogger.ext`, please ensure the function can safely\n * be called multiple times on the same object\n *\n * @param logger Function The logger to be (re-)extended\n *\n * @return The logger that was given, extended\n */\nanylogger.ext = function(logger) {\n  logger.enabledFor = function(){};\n  for (var method in anylogger.levels) {logger[method] = function(){};}\n  return logger\n};\n\nmodule.exports = anylogger;\n","import anylogger from 'anylogger';\r\n// import { default as anylogger } from \"anylogger\";\r\nconst log = anylogger('questionFeedback.js');\r\n\r\nexport function enableFeedbackOnQuestion() {\r\n  console.groupCollapsed(\"Entering enableFeedbackOnQuestion for question: %s\", this.questionId);\r\n\r\n  // Usage: svlib.enableFeedbackOnQuestion.call(this);\r\n\r\n  // --- Constants and Element Creation ---\r\n  const closedIconEmpty = \"üó®Ô∏è\"; // Icon for opening the feedback textarea\r\n  const closedIconFilled = \"üí¨\"; \r\n  const openedIcon = \"‚úîÔ∏è\"; // Icon for closing the feedback textarea\r\n  const buttonRightOffset = 10; // Distance from the right edge for the button\r\n  const buttonTopOffset = 10; // Distance from the top edge for the button\r\n  const textareaButtonGap = 5; // Gap between the textarea and the button\r\n\r\n  // Create the feedback button\r\n  const feedbackButton = document.createElement(\"button\");\r\n  feedbackButton.textContent = closedIconEmpty; // Set initial icon\r\n  log.debug(\"Created feedback button.\");\r\n\r\n  // Get the question ID and container\r\n  const questionId = this.questionId;\r\n  const questionContainer = this.getQuestionContainer();\r\n  log.debug(\"Retrieved question container for question ID: %s\", questionId);\r\n\r\n  // Find the main div for the body of question text\r\n  const questionDisplayWrapper = questionContainer.querySelector(\".question-display-wrapper\");\r\n  if (!questionDisplayWrapper) {\r\n      log.debug(\"Error: .question-display-wrapper not found in question container for question ID: %s\", questionId);\r\n      return; // Exit if the target element is not found\r\n  }\r\n  log.debug(\"Found .question-display-wrapper.\");\r\n\r\n  // Create the feedback textarea\r\n  const feedbackTextarea = document.createElement(\"textarea\");\r\n  feedbackTextarea.placeholder = \"Please enter any comments about this question here.\";\r\n  log.debug(\"Created feedback textarea.\");\r\n\r\n  // --- Initial Styling ---\r\n  // Style for the feedback button\r\n  feedbackButton.style.position = \"absolute\";\r\n  // feedbackButton.style.right = `${buttonRightOffset}px`; // Position from the right\r\n  // feedbackButton.style.top = `${buttonTopOffset}px`; // Position from the top\r\n  feedbackButton.style.right = \"10px\";\r\n  feedbackButton.style.top = \"10px\";\r\n  feedbackButton.style.fontSize = \"1.5em\"; // Font size\r\n  feedbackButton.style.zIndex = \"1001\"; // Ensure button is always above the textarea\r\n  feedbackButton.style.backgroundColor = \"transparent\"; // Make button background transparent\r\n  feedbackButton.style.border = \"none\"; // Remove button border\r\n  feedbackButton.style.cursor = \"pointer\"; // Indicate clickable element\r\n  feedbackButton.style.outline = \"none\"; // Remove outline on focus\r\n  // Add tooltip\r\n  feedbackButton.title = \"Have feedback?\";\r\n  log.debug(\"Applied initial styles to feedback button.\");\r\n\r\n  // Style for the feedback textarea\r\n  feedbackTextarea.style.position = \"absolute\";\r\n  // feedbackTextarea.style.bottom = \"10px\"; // Position from the bottom of the wrapper\r\n  feedbackTextarea.style.right = \"50px\";\r\n  feedbackTextarea.style.top = \"10px\"; // Align top edges with the button\r\n  feedbackTextarea.style.width = \"calc(100% - 60px)\"; // Adjust width to make space for the button (approx)\r\n  feedbackTextarea.style.maxWidth = \"300px\"; // Max width for the textarea\r\n  feedbackTextarea.style.height = \"100px\"; // Initial height\r\n  feedbackTextarea.style.maxHeight = \"200px\"; // Max height\r\n  feedbackTextarea.style.zIndex = \"1000\"; // Ensure textarea is below the button\r\n  feedbackTextarea.style.display = \"none\"; // Initially hidden\r\n  feedbackTextarea.style.backgroundColor = \"#f9f9f9\"; // Slightly lighter background\r\n  feedbackTextarea.style.border = \"1px solid #ddd\"; // Lighter border\r\n  feedbackTextarea.style.borderRadius = \"5px\"; // Rounded corners\r\n  feedbackTextarea.style.padding = \"10px\"; // Increased padding\r\n  feedbackTextarea.style.fontSize = \"1em\"; // Font size\r\n  feedbackTextarea.style.resize = \"vertical\"; // Allow vertical resizing only\r\n  feedbackTextarea.style.boxShadow = \"0 4px 8px rgba(0, 0, 0, 0.1)\"; // More pronounced shadow\r\n  feedbackTextarea.style.transition = \"all 0.3s ease-in-out\"; // Smooth transition with ease-in-out\r\n  feedbackTextarea.style.fontFamily = \"Arial, sans-serif\"; // Font family\r\n  feedbackTextarea.style.color = \"#333\"; // Dark text color\r\n  feedbackTextarea.style.lineHeight = \"1.6\"; // Improved line height\r\n  feedbackTextarea.style.boxSizing = \"border-box\"; // Include padding and border\r\n  feedbackTextarea.style.overflowY = \"auto\"; // Enable vertical scrolling if needed\r\n  feedbackTextarea.style.wordWrap = \"break-word\"; // Break long words\r\n  log.debug(\"Applied initial styles to feedback textarea.\");\r\n\r\n  // --- Append Elements ---\r\n  // It's good practice to ensure the container has a position property\r\n  // for absolute positioning of its children to work relative to it.\r\n  if (getComputedStyle(questionDisplayWrapper).position === 'static') {\r\n      questionDisplayWrapper.style.position = 'relative';\r\n      log.debug(\"Set questionDisplayWrapper position to 'relative'.\");\r\n  }\r\n\r\n  // Append the button and textarea to the questionDisplayWrapper\r\n  questionDisplayWrapper.appendChild(feedbackButton);\r\n  questionDisplayWrapper.appendChild(feedbackTextarea);\r\n  log.debug(\"Appended feedback button and textarea to questionDisplayWrapper.\");\r\n\r\n  // --- Event Listener ---\r\n  feedbackButton.addEventListener(\"click\", function() {\r\n      log.debug(\"Feedback button clicked for question: %s\", questionId);\r\n\r\n      // Toggle the visibility of the textarea\r\n      if (feedbackTextarea.style.display === \"none\") {\r\n          log.debug(\"Showing feedback textarea.\");\r\n          feedbackTextarea.style.display = \"block\";\r\n          feedbackButton.textContent = openedIcon; // Change icon to opened\r\n          feedbackButton.style.transform = \"scaleX(1)\"; // Reset mirror\r\n\r\n          // Position the textarea to the left of the button\r\n          // We calculate the right position based on the button's right position and its width\r\n          feedbackTextarea.style.right = `${buttonRightOffset + feedbackButton.offsetWidth + textareaButtonGap}px`;\r\n          feedbackTextarea.style.top = `${buttonTopOffset}px`; // Align top edges\r\n\r\n          // Give focus to textarea\r\n          feedbackTextarea.focus();\r\n\r\n      } else {\r\n          log.debug(\"Hiding feedback textarea.\");\r\n          feedbackTextarea.style.display = \"none\";\r\n          // Reset button position (not strictly necessary here as button position doesn't change when hidden?)\r\n          feedbackButton.style.top = `${buttonTopOffset}px`;\r\n          feedbackButton.style.right = `${buttonRightOffset}px`;  \r\n      }\r\n  });\r\n\r\n  feedbackTextarea.addEventListener(\"blur\", function() {\r\n      log.debug(\"Textarea lost focus.\");\r\n      const feedback = feedbackTextarea.value.trim();\r\n      if (feedback) {\r\n          try {\r\n              sessionStorage.setItem(questionId + \"_feedback\", feedback);\r\n              log.debug(\"Feedback saved to sessionStorage for question: %s\", questionId);\r\n          } catch (e) {\r\n              log.debug(\"Error saving feedback to sessionStorage: %o\", e);\r\n          }\r\n          feedbackButton.textContent = closedIconFilled;\r\n          feedbackButton.style.transform = \"scaleX(-1)\"; // Horiz mirror to match closedIconEmpty\r\n      } else {\r\n          log.debug(\"No feedback entered for question: %s\", questionId);\r\n          feedbackButton.textContent = closedIconEmpty; // Reset icon if no feedback\r\n      }\r\n\r\n      if (event.relatedTarget === feedbackButton) {\r\n          return\r\n      } else {\r\n          log.debug(\"Textarea blurred and focus moved elsewhere. Hiding textarea.\");\r\n          feedbackTextarea.style.display = \"none\"; // Hide it\r\n      }\r\n  });\r\n\r\n  document.addEventListener(\"DOMContentLoaded\", function() {\r\n      const savedFeedback = sessionStorage.getItem(questionId + \"_feedback\");\r\n      if (savedFeedback) {\r\n          feedbackTextarea.value = savedFeedback;\r\n          feedbackButton.textContent = closedIconFilled; // Change icon to indicate saved feedback\r\n          log.debug(\"Loaded saved feedback from sessionStorage for question: %s\", questionId);\r\n      } else {\r\n          log.debug(\"No saved feedback found in sessionStorage for question: %s\", questionId);\r\n          feedbackButton.textContent = closedIconEmpty; // Reset icon if no saved feedback\r\n      }\r\n  });\r\n\r\n  log.debug(\"Feedback button event listener added for question: %s. Exiting enableFeedbackOnQuestion().\", questionId);\r\n  console.groupEnd();\r\n};\r\n\r\n\r\n\r\nexport function storeQuestionFeedbackAsEmbeddedData() {\r\n  // Usage: svlib.storeQuestionFeedbackAsEmbeddedData();\r\n  console.groupCollapsed(\"Serializing and storing feedback for all questions.\");\r\n\r\n  // Find all QID + \"_feedback\" items in sessionStorage\r\n  const feedbackKeys = Object.keys(sessionStorage).filter(key => key.endsWith(\"_feedback\"));\r\n  log.debug(\"Found %d feedback keys in sessionStorage.\", feedbackKeys.length);\r\n  if (feedbackKeys.length > 0) {\r\n      const feedbackData = {};\r\n      feedbackKeys.forEach(key => {\r\n          const questionId = key.split(\"_\")[0]; // Extract QID from the key\r\n          const feedback = sessionStorage.getItem(key);\r\n          feedbackData[questionId] = feedback;\r\n          log.debug(\"Storing feedback for %s: %s\", questionId, feedback);\r\n      });\r\n\r\n      // Store the feedback data as embedded data\r\n      Qualtrics.SurveyEngine.setJSEmbeddedData(\"feedbackData\", JSON.stringify(feedbackData));\r\n      log.success(\"Stored feedback data as embedded data.\");\r\n  } else {\r\n      log.warn(\"No feedback keys found in sessionStorage.\");\r\n  }\r\n  console.groupEnd();\r\n};","import { enableFeedbackOnQuestion, storeQuestionFeedbackAsEmbeddedData } from \"./questionFeedback.js\";\r\nimport anylogger from 'anylogger';\r\nconst log = anylogger('main.js');\r\n\r\nexport function addOnload() {\r\n\r\n  Qualtrics.SurveyEngine.addOnload(function() {\r\n    const log = anylogger.getLogger('addOnload');\r\n    log.log('SurveyEngine.onload');\r\n\r\n\r\n    // Optionally, store feedback as embedded data when the survey is submitted\r\n    Qualtrics.SurveyEngine.addOnPageSubmit(function() {\r\n      storeQuestionFeedbackAsEmbeddedData();\r\n    });\r\n  });\r\n}\r\n\r\n\r\nconst svlib = {\r\n  addOnload,\r\n  enableFeedbackOnQuestion,\r\n  storeQuestionFeedbackAsEmbeddedData\r\n};\r\n\r\nif (typeof window !== 'undefined') {\r\n  window.svlib = svlib;\r\n}\r\n\r\nexport default svlib;"],"names":["loggers","Object","create","anylogger","name","options","ext","new","levels","error","warn","info","log","debug","trace","result","slice","call","arguments","defineProperty","get","e","args","level","length","shift","apply","logger","method","enabledFor","anylogger_cjs","storeQuestionFeedbackAsEmbeddedData","console","groupCollapsed","feedbackKeys","keys","sessionStorage","filter","key","endsWith","feedbackData","forEach","questionId","split","feedback","getItem","Qualtrics","SurveyEngine","setJSEmbeddedData","JSON","stringify","success","groupEnd","addOnload","getLogger","addOnPageSubmit","svlib","enableFeedbackOnQuestion","this","closedIconEmpty","feedbackButton","document","createElement","textContent","questionContainer","getQuestionContainer","questionDisplayWrapper","querySelector","feedbackTextarea","placeholder","style","position","right","top","fontSize","zIndex","backgroundColor","border","cursor","outline","title","width","maxWidth","height","maxHeight","display","borderRadius","padding","resize","boxShadow","transition","fontFamily","color","lineHeight","boxSizing","overflowY","wordWrap","getComputedStyle","appendChild","addEventListener","transform","offsetWidth","focus","value","trim","setItem","event","relatedTarget","savedFeedback","window"],"mappings":"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"}