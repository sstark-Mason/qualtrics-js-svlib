{
  "version": 3,
  "sources": ["../node_modules/ms/index.js", "../node_modules/debug/src/common.js", "../node_modules/debug/src/browser.js", "../src_ts/main.ts", "../src_ts/qualtricsUtils.ts", "../src_ts/storageUtils.ts", "../src_ts/feedbackUtils.ts", "../src_ts/nextButtonManager.ts", "../src_ts/comprehensionQuestionUtils.ts", "../src_ts/questionEventUtils.ts", "../src_ts/questionTimeLimit.ts"],
  "sourcesContent": ["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "// src/main.ts\r\nimport { describeThisQuestion } from \"./qualtricsUtils\";\r\nimport { testDataPersistence } from \"./storageUtils\";\r\nimport { enableFeedbackOnQuestion, storeAllSessionFeedbackAsEmbeddedData } from \"./feedbackUtils\";\r\nimport { enableComprehensionQuestion } from \"./comprehensionQuestionUtils\";\r\nimport { enableQuestionChoiceLogger } from \"./questionEventUtils\";\r\nimport { NextButtonManager } from \"./nextButtonManager\";\r\nimport { enableQuestionTimer } from \"./questionTimeLimit\";\r\n\r\n// This is the main entry point for your library.\r\n// Functions exported from here will be accessible on the global object\r\n// when bundled with esbuild's iife format and globalName.\r\n\r\nconsole.log(\"svlib loading...\");\r\n/**\r\n * Records data. In a real scenario, this might interact with Qualtrics'\r\n * embedded data fields or use Qualtrics JS API.\r\n * @param data The data to record.\r\n */\r\nfunction recordData(data: Record<string, any>): void {\r\n  console.debug(\"Recording data:\", data);\r\n  // Example: Set Qualtrics embedded data\r\n  // if (window.Qualtrics && Qualtrics.SurveyEngine) {\r\n  //   Qualtrics.SurveyEngine.setEmbeddedData(\"customData\", JSON.stringify(data));\r\n  // }\r\n}\r\n\r\n// To make these functions easily callable from Qualtrics after including the\r\n// bundled script, we export them. When esbuild bundles this as an IIFE\r\n// with a `globalName`, these exports will be attached to that global object.\r\nexport { \r\n  recordData, \r\n  describeThisQuestion, \r\n  testDataPersistence, \r\n  enableFeedbackOnQuestion, \r\n  storeAllSessionFeedbackAsEmbeddedData, \r\n  enableComprehensionQuestion, \r\n  enableQuestionChoiceLogger, \r\n  NextButtonManager,\r\n  enableQuestionTimer,\r\n };\r\n\r\nconsole.info(\"svlib loaded and ready.\");\r\n", "// src/qualtricsUtils.ts\r\n\r\nexport function describeThisQuestion(qContext: any): void {\r\n  const questionId = qContext.questionId;\r\n  console.groupCollapsed(\"describeThisQuestion(%s)\", questionId);\r\n  const questionInfo = qContext.getQuestionInfo();\r\n  console.info(\"Question Info: \", questionInfo);\r\n  const questionChoices = qContext.getChoices();\r\n  console.info(\"Question Choices: \", questionChoices);\r\n  console.groupEnd();\r\n}\r\n\r\nexport function normalizeQuestionId(questionId: string): string {\r\n  // Looped questions are prefixed with \\d+_. We want to normalize to the base questionId. Example: '1_QID1' -> 'QID1'.\r\n  return questionId.replace(/^\\d+_/, '');\r\n}\r\n\r\n\r\n", "declare const Qualtrics: any;\r\n\r\nexport function testDataPersistence(qContext: any): void {\r\n  console.groupCollapsed(\"testDataPersistence\");\r\n  const questionId = qContext.questionId;\r\n\r\n  // Testing embedded data persistence\r\n  // Warning: Qualtrics.SurveyEngine.getEmbeddedData() is deprecated and will return null in the \"simple layout\".\r\n  console.group(\"calling testEmbed\"); // Survey Flow: Set \"testEmbed\" to \"default value of testEmbed\"\r\n      console.info(\"testEmbed: %s\", Qualtrics.SurveyEngine.getJSEmbeddedData(\"testEmbed\")); // Prints: \"default value of __js_testEmbed\"\r\n      console.info(\"Setting to 'NEW VALUE of testEmbed'...\");\r\n      Qualtrics.SurveyEngine.setJSEmbeddedData(\"testEmbed\", \"NEW VALUE of testEmbed\"); // Doesn't persist through refresh, but successfully sets \"__js_testEmbed\" to \"NEW VALUE of testEmbed\" upon page submission.\r\n      console.info(\"Retrieving testEmbed again (check against final response form): %s\", Qualtrics.SurveyEngine.getJSEmbeddedData(\"testEmbed\")); // Prints: \"NEW VALUE of testEmbed\"\r\n  console.groupEnd();\r\n\r\n  console.group(\"calling __js_testEmbed\"); // Survey Flow: Set \"__js_testEmbed\" to \"default value of __js_testEmbed\"\r\n      console.info(\"__js_testEmbed: %s\", Qualtrics.SurveyEngine.getJSEmbeddedData(\"__js_testEmbed\")); // Prints: \"default value of __js___js_testEmbed\"\r\n      console.info(\"Setting to 'NEW VALUE of __js_testEmbed'...\");\r\n      Qualtrics.SurveyEngine.setJSEmbeddedData(\"__js_testEmbed\", \"NEW VALUE of __js_testEmbed\"); // Doesn't persist through refresh, but successfully sets \"__js___js_testEmbed\" to \"NEW VALUE of __js_testEmbed\" upon page submission.\r\n      console.info(\"Retrieving __js_testEmbed again (check against final response form): %s\", Qualtrics.SurveyEngine.getJSEmbeddedData(\"__js_testEmbed\")); // Prints: \"NEW VALUE of __js_testEmbed\"\r\n  console.groupEnd();\r\n\r\n  console.group(\"calling __js___js_testEmbed\"); // Survey Flow: Set \"__js___js_testEmbed\" to \"default value of __js___js_testEmbed\"\r\n      console.info(\"__js___js_testEmbed: %s\", Qualtrics.SurveyEngine.getJSEmbeddedData(\"__js___js_testEmbed\")); // Prints: undefined\r\n      console.info(\"Setting to 'NEW VALUE of __js___js_testEmbed'...\");\r\n      Qualtrics.SurveyEngine.setJSEmbeddedData(\"__js___js_testEmbed\", \"NEW VALUE of __js___js_testEmbed\"); // Doesn't persist through refresh and does not set any embedded data in the final response form (since it's looking for a non-existent \"__js___js___js_testEmbed\" in the survey flow), but DOES persist on page submit and can be loaded on the next page (returning \"NEW VALUE of __js___js_testEmbed\" instead of undefined).\r\n      console.info(\"Retrieving __js___js_testEmbed again (check against final response form): %s\", Qualtrics.SurveyEngine.getJSEmbeddedData(\"__js___js_testEmbed\")); // Prints: \"NEW VALUE of __js___js_testEmbed\"\r\n  console.groupEnd();\r\n\r\n  // Testing sessionStorage persistence\r\n  let sessionData = sessionStorage.getItem(\"testData\") ?? null;\r\n  if (sessionData) {\r\n      console.info(\"Session data loaded:\", sessionData);\r\n  } else {\r\n      console.warn(\"No session data found. Embedding...\");\r\n      sessionData = \"session test string\";\r\n      sessionStorage.setItem(\"testData\", sessionData);\r\n  }\r\n\r\n  // Testing localStorage persistence\r\n  let localData = localStorage.getItem(\"testData\") ?? null;\r\n  if (localData) {\r\n      console.info(\"Local data loaded:\", localData);\r\n  } else {\r\n      console.warn(\"No local data found. Embedding...\");\r\n      localData = \"local test string\";\r\n      localStorage.setItem(\"testData\", localData);\r\n  }\r\n  console.groupEnd();\r\n}\r\n\r\nexport function saveSessionJson(key: string, data: Record<string, any>): void {\r\n  try {\r\n    const jsonString = JSON.stringify(data);\r\n    sessionStorage.setItem(key, jsonString);\r\n  } catch (error) {\r\n    console.error(\"Error saving session data: %s\", error);\r\n  }\r\n}\r\n\r\nexport function loadSessionJson(key: string): Record<string, any> | null {\r\n  try {\r\n    const jsonString = sessionStorage.getItem(key);\r\n    return jsonString ? JSON.parse(jsonString) : null;\r\n  } catch (error) {\r\n    console.error(\"Error loading session data: %s\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function transferSessionDataToEmbeddedData(\r\n  sessionKey: string,\r\n  embeddedDataKey: string\r\n): void {\r\n\r\n  try {\r\n    const sessionData = sessionStorage.getItem(sessionKey);\r\n    if (sessionData) {    \r\n      // Set the embedded data in Qualtrics\r\n      Qualtrics.SurveyEngine.setJSEmbeddedData(embeddedDataKey, sessionData);\r\n    }\r\n  } catch (error) {\r\n      console.error(\"Error transferring session data to embedded data: %s\", error);\r\n    }\r\n}", "import { normalizeQuestionId } from \"./qualtricsUtils\";\r\n\r\ndeclare const Qualtrics: any;\r\n\r\nexport function enableFeedbackOnQuestion(qContext: any, options?: FeedbackOptions): void {\r\n    // Usage: svlib.enableFeedbackOnQuestion(this);\r\n    const widget = new FeedbackOnQuestion(qContext, options);\r\n    widget.init();\r\n}\r\n\r\nexport interface FeedbackOptions {\r\n  /** Icon when closed with no feedback */\r\n  closedIconEmpty?: string;\r\n  /** Icon when closed with feedback saved */\r\n  closedIconFilled?: string;\r\n  /** Icon when textarea is open */\r\n  openedIcon?: string;\r\n  /** Suffix for sessionStorage key */\r\n  storageKeySuffix?: string;\r\n}\r\n\r\nconst DEFAULTS: Required<FeedbackOptions> = {\r\n  closedIconEmpty: \"\uD83D\uDDE8\uFE0F\",\r\n  closedIconFilled: \"\uD83D\uDCAC\",\r\n  openedIcon: \"\u2714\uFE0F\",\r\n  storageKeySuffix: \"_feedback\",\r\n};\r\n\r\nexport class FeedbackOnQuestion {\r\n    private questionId: string;\r\n    private qdWrapper: HTMLElement;\r\n    private button!: HTMLButtonElement;\r\n    private textarea!: HTMLTextAreaElement;\r\n    private opts: Required<FeedbackOptions>;\r\n\r\n    constructor(\r\n        private qContext: any,\r\n        options: FeedbackOptions = {}\r\n    ) {\r\n        this.questionId = normalizeQuestionId(qContext.questionId);\r\n        const questionContainer = qContext.getQuestionContainer();\r\n        this.qdWrapper = questionContainer.querySelector(\".question-display-wrapper\");\r\n        this.opts = { ...DEFAULTS, ...options };\r\n    }\r\n\r\n    public init(): void {\r\n        this.ensureWrapper();\r\n        this.createElements();\r\n        this.appendElements();\r\n        this.attachEvents();\r\n        this.loadSavedFeedback();\r\n    }\r\n\r\n    private ensureWrapper(): void {\r\n        // make positioning-relative if needed\r\n        if (getComputedStyle(this.qdWrapper).position === \"static\") {\r\n            this.qdWrapper.style.position = \"relative\";\r\n        }\r\n        this.qdWrapper.classList.add(\"feedback-wrapper\");\r\n    }\r\n\r\n    private createElements(): void {\r\n        // button\r\n        this.button = document.createElement(\"button\");\r\n        this.button.type = \"button\";\r\n        this.button.classList.add(\"feedback-button\");\r\n        this.button.textContent = this.opts.closedIconEmpty;\r\n        this.button.title = \"Have feedback?\";\r\n        this.button.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n        // textarea\r\n        this.textarea = document.createElement(\"textarea\");\r\n        this.textarea.classList.add(\"feedback-textarea\");\r\n        this.textarea.placeholder = \"Please enter any comments about this question here.\";\r\n    }\r\n\r\n    private appendElements(): void {\r\n        this.qdWrapper.append(this.button, this.textarea);\r\n    }\r\n\r\n    private attachEvents(): void {\r\n        this.button.addEventListener(\"click\", () => this.toggleTextarea());\r\n        this.textarea.addEventListener(\"blur\", (e) => {\r\n            this.saveFeedback();\r\n            this.updateButtonIcon();\r\n            const related = (e as FocusEvent).relatedTarget;\r\n            if (related !== this.button) {\r\n                this.hideTextarea();\r\n            }\r\n        });\r\n    }\r\n\r\n    private toggleTextarea(): void {\r\n        const isOpen = this.textarea.classList.toggle(\"open\");\r\n        this.button.setAttribute(\"aria-expanded\", String(isOpen));\r\n        this.updateButtonIcon(isOpen);\r\n        if (isOpen) {\r\n            const gap = 5;\r\n            const offset = this.button.offsetWidth + gap;\r\n            this.textarea.style.right = `${offset}px`;\r\n            this.textarea.focus();\r\n        } else {\r\n            this.hideTextarea();\r\n            this.saveFeedback();\r\n        }\r\n    }\r\n\r\n    private hideTextarea(): void {\r\n        this.textarea.classList.remove(\"open\");\r\n        this.button.setAttribute(\"aria-expanded\", \"false\");\r\n        this.updateButtonIcon(false);\r\n        this.textarea.style.removeProperty(\"right\");\r\n    }\r\n\r\n    private updateButtonIcon(isOpen: boolean = false): void {\r\n        if (isOpen) {\r\n            this.button.textContent = this.opts.openedIcon;\r\n            this.button.style.transform = \"scaleX(1)\";\r\n        } else if (this.textarea.value.trim()) {\r\n            this.button.textContent = this.opts.closedIconFilled;\r\n            this.button.style.transform = \"scaleX(-1)\";\r\n        } else {\r\n            this.button.textContent = this.opts.closedIconEmpty;\r\n            this.button.style.transform = \"scaleX(1)\";\r\n        }\r\n    }\r\n\r\n    private saveFeedback(): void {\r\n        const key = this.questionId + this.opts.storageKeySuffix;\r\n        const val = this.textarea.value.trim();\r\n        if (val) {\r\n            sessionStorage.setItem(key, val);\r\n        } else {\r\n            sessionStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    private loadSavedFeedback(): void {\r\n        const key = this.questionId + this.opts.storageKeySuffix;\r\n        const saved = sessionStorage.getItem(key);\r\n        if (saved) {\r\n            this.textarea.value = saved;\r\n            this.updateButtonIcon(false);\r\n        }\r\n    }\r\n}\r\n\r\nexport function storeAllSessionFeedbackAsEmbeddedData(): void {\r\n    // Usage: svlib.storeAllSessionFeedbackAsEmbeddedData(); // Use once per page load\r\n    try {\r\n        const feedbackKeys = Object.keys(sessionStorage).filter(key => key.endsWith(\"_feedback\"));\r\n        const feedbackData = {};\r\n        feedbackKeys.forEach(key => {\r\n            try {\r\n                const questionId = key.split(\"_\")[0]; // Extract questionId from key\r\n                const feedback = sessionStorage.getItem(key);\r\n                feedbackData[questionId] = feedback;\r\n            } catch (error) {\r\n                console.error(\"Error processing feedback for key %s: %s\", key, error);\r\n            }\r\n        })\r\n        Qualtrics.SurveyEngine.setJSEmbeddedData(\"questionFeedbackJSON\", JSON.stringify(feedbackData));\r\n    } catch (error) {\r\n        console.error(\"Error storing session feedback as embedded data: %s\", error);\r\n    }\r\n}\r\n\r\n\r\n", "import { normalizeQuestionId } from \"./qualtricsUtils\";\r\nimport { saveSessionJson, loadSessionJson, transferSessionDataToEmbeddedData } from \"./storageUtils\";\r\nimport debugLib from \"debug\";\r\nconst debug = debugLib(\"svlib:questionEventUtils\");\r\n\r\nexport interface QuestionPassState {\r\n    questionId: string;\r\n    passed: boolean;\r\n}\r\n\r\nexport class NextButtonManager {\r\n    private static instance: NextButtonManager | null = null;\r\n    private requiredQuestions: QuestionPassState[];\r\n\r\n    private constructor() {\r\n        localStorage.setItem(\"debug\", \"svlib:nextButtonManager\"); // Enables debug logging for this class\r\n        this.requiredQuestions = [];\r\n        debug(\"NextButtonManager initialized with empty required questions list.\");\r\n    }\r\n\r\n    public static getInstance(): NextButtonManager {\r\n        if (!(window as any).nextButtonManager) {\r\n            (window as any).nextButtonManager = new NextButtonManager();\r\n            debug(\"Created new instance of NextButtonManager.\");\r\n        }\r\n        return (window as any).nextButtonManager;\r\n    }\r\n\r\n    public registerQuestion(qContext: any): void {\r\n        const question: QuestionPassState = {\r\n            questionId: normalizeQuestionId(qContext.questionId),\r\n            passed: false // Default state is not passed\r\n        }\r\n        if (!this.requiredQuestions.includes(question)) {\r\n            this.requiredQuestions.push(question);\r\n            qContext.disableNextButton();\r\n            debug(\"Registered question %o with NextButtonManager.\", question);\r\n        } else {\r\n            debug(\"Question %o is already registered with NextButtonManager.\", question);\r\n        }\r\n    }\r\n\r\n    public unregisterQuestion(qContext: any): void {\r\n        const questionId = normalizeQuestionId(qContext.questionId);\r\n        this.requiredQuestions = this.requiredQuestions.filter(q => q.questionId !== questionId);\r\n        debug(\"Unregistered question with id %s from NextButtonManager.\", questionId);\r\n    }\r\n\r\n    public checkOverallPassState(): boolean {\r\n        if (!this.requiredQuestions || this.requiredQuestions.length === 0) {\r\n            debug(\"No required questions registered; passing by default.\");\r\n            return true; // No required questions means pass by default\r\n        } else if (this.requiredQuestions.every(q => q.passed)) {\r\n            debug(\"All registered questions passed; returning true.\");\r\n            return true; // All registered questions passed\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public setQuestionPassState(qContext: any, passed: boolean): void {\r\n        const questionId = normalizeQuestionId(qContext.questionId);\r\n        const question = this.requiredQuestions.find(q => q.questionId === questionId);\r\n        if (question) {\r\n            question.passed = passed;\r\n            debug(\"Set pass state for question %s to %s.\", questionId, passed);\r\n        } else {\r\n            debug(\"Question %s not found in registered questions; cannot set pass state.\", questionId);\r\n        }\r\n    }\r\n\r\n    public clearQuestions(): void {\r\n        this.requiredQuestions = [];\r\n        debug(\"Cleared all registered questions from NextButtonManager.\");\r\n    }\r\n}", "import { normalizeQuestionId } from \"./qualtricsUtils\";\r\nimport { saveSessionJson, loadSessionJson, transferSessionDataToEmbeddedData } from \"./storageUtils\";\r\nimport { QuestionChoiceListener } from \"./questionEventUtils\";\r\nimport { NextButtonManager } from \"./nextButtonManager\";\r\n\r\nimport debugLib from \"debug\";\r\nconst debug = debugLib(\"svlib:comprehensionQuestionUtils\");\r\n\r\ndeclare const Qualtrics: any;\r\n\r\nexport function enableComprehensionQuestion(qContext: any, correctChoices: number[], requiredChoices?: number[]): void {\r\n    \r\n    const comprehensionQuestion = new ComprehensionQuestion(qContext, correctChoices, requiredChoices);\r\n    comprehensionQuestion.init();\r\n\r\n}\r\n\r\nexport class ComprehensionQuestion {\r\n    private qContext: any\r\n    private questionId: string;\r\n    private choiceInputs: NodeListOf<HTMLInputElement>;\r\n    private correctChoices: number[];\r\n    private requiredChoices: number[];\r\n    private nextButtonManager: NextButtonManager | null = null;\r\n\r\n    constructor(qContext: any, correctChoices: number[] = [], requiredChoices: number[] = correctChoices) {\r\n        this.qContext = qContext;\r\n        this.questionId = normalizeQuestionId(qContext.questionId);\r\n        this.choiceInputs = qContext.getChoiceContainer().querySelectorAll(\"input[type='radio'], input[type='checkbox']\");\r\n        this.correctChoices = correctChoices;\r\n        this.requiredChoices = requiredChoices;\r\n        this.nextButtonManager = NextButtonManager.getInstance();\r\n        this.nextButtonManager.registerQuestion(qContext);\r\n\r\n        debug(\"ComprehensionQuestion instantiated for questionId: %s with correctChoices: %o and requiredChoices: %o\", this.questionId, this.correctChoices, this.requiredChoices);\r\n        debug(\"%s choiceInputs: %o\", this.questionId, this.choiceInputs);\r\n    }\r\n\r\n    public init(): void {\r\n\r\n        localStorage.setItem(\"debug\", \"svlib:comprehensionQuestionUtils\"); // Enables debug logging for this class\r\n\r\n        this.loadChoiceStates();\r\n        debug(\"%s: Loaded choice states: %o\", this.questionId, this.choiceInputs);\r\n\r\n        let callbacks: Array<(event: Event) => void> = [];\r\n\r\n        if (this.correctChoices.length > 0) {\r\n            callbacks.push((event: Event) => this.checkClickedChoiceCorrectness(event, this.correctChoices));\r\n            callbacks.push((event: Event) => this.checkAllChoicesCorrectness(event, this.correctChoices));\r\n        }\r\n\r\n        if (this.requiredChoices.length > 0) {\r\n            callbacks.push((event: Event) => this.checkAllChoicesRequired(event, this.requiredChoices));\r\n            // callbacks.push((event: Event) => this.qContext.updateNextManager(this.checkAllChoicesRequired(event, this.requiredChoices)));\r\n        }\r\n\r\n        callbacks.push(() => this.saveChoiceStates());\r\n\r\n        // const callbacks = [\r\n        //     (event: Event) => this.checkClickedChoiceCorrectness(event, this.correctChoices),\r\n        //     (event: Event) => this.checkAllChoicesCorrectness(event, this.correctChoices),\r\n        //     () => this.saveChoiceStates(),\r\n        // ];\r\n\r\n        this.attachChoiceListeners(\"click\", callbacks);\r\n    }\r\n\r\n    private attachChoiceListeners(eventType: string, callbacks: Array<(event: Event) => void>): void {\r\n        for (const input of this.choiceInputs) {\r\n            input.addEventListener(eventType, (event: Event) => {\r\n                setTimeout(() => {\r\n                    callbacks.forEach(cb => cb(event));\r\n                }, 0);\r\n            });\r\n        }\r\n        // this.choiceInputs.forEach((input) => {\r\n        //     input.addEventListener(eventType, (event: Event) => {\r\n        //         setTimeout(() => {\r\n        //             callbacks.forEach(cb => cb(event));\r\n        //         }, 0);\r\n        //     });\r\n        // });\r\n    }\r\n\r\n    private checkClickedChoiceCorrectness(event: Event, correctChoices: number[]): boolean {\r\n        debug(\"%s: Checking clicked choice correctness.\", this.questionId);\r\n        const input = event.target as HTMLInputElement;\r\n        const choiceId = parseInt(input.id.split(\"-\").pop()!, 10);      \r\n\r\n        debug(\"%s: Clicked choiceId %s.\", this.questionId, choiceId);\r\n        \r\n        if (correctChoices.includes(choiceId)) {\r\n            debug(\"%s choice %s is correct; marking.\", this.questionId, choiceId);\r\n            input.setAttribute(\"data-correctness\", \"correct\");\r\n            input.disabled = true;\r\n            this.scoreOnCorrectChoiceSelected();\r\n            return true; // Choice is correct\r\n        } else if (!correctChoices.includes(choiceId)) {\r\n            if (input.type === \"radio\") {\r\n                debug(\"%s radio choice %s is incorrect; marking and disabling.\", this.questionId, choiceId);\r\n                input.setAttribute(\"data-correctness\", \"incorrect\");\r\n                input.disabled = true;\r\n            } else if (input.type === \"checkbox\") {\r\n                if (input.checked) {\r\n                    debug(\"%s checkbox choice %s is incorrect; marking as incorrect.\", this.questionId, choiceId);\r\n                    input.setAttribute(\"data-correctness\", \"incorrect\");\r\n                } else {\r\n                    debug(\"%s checkbox choice %s is incorrect; disabling after unselect.\", this.questionId, choiceId);\r\n                    input.setAttribute(\"data-correctness\", \"incorrect\");\r\n                    input.disabled = true; // Disable after unselecting\r\n                }\r\n            }\r\n        }\r\n        return false; // Choice is incorrect\r\n    }\r\n\r\n    public checkAllChoicesCorrectness(event: Event, correctChoices: number[]): boolean {\r\n        const selectedChoices = this.qContext.getSelectedChoices().map(Number);\r\n        debug(\"%s: Checking all choices correctness. Selected choices: %o\", this.questionId, selectedChoices);\r\n\r\n        // Checking if all correct choices are selected\r\n        if (correctChoices.every(choice => selectedChoices.includes(choice))) {\r\n            debug(\"All correct choices selected for questionId: %s\", this.questionId);\r\n            for (const input of this.choiceInputs) {\r\n                if (input.getAttribute(\"data-correctness\") === \"incorrect\" && input.checked) {\r\n                    debug(\"Checkbox %s input %s is selected but incorrect; allowing deselection.\", this.questionId, input.id);\r\n                    continue; // Allow deselection of selected incorrect choices\r\n                } else {\r\n                    debug(\"Disabling %s input %s\", this.questionId, input.id);\r\n                    input.disabled = true; // Disable all \"correct selection state\" choices\r\n                }\r\n            }\r\n\r\n            // Checking if all selected choices are correct\r\n            if (selectedChoices.every(choice => correctChoices.includes(choice))) {\r\n                debug(\"All choices are correct for questionId: %s\", this.questionId);\r\n                return true;\r\n            }\r\n            \r\n        } else {\r\n            for (const input of this.choiceInputs) {\r\n                if (input.getAttribute(\"data-correctness\") === \"incorrect\" && !input.checked) {\r\n                    input.disabled = true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public countCorrectness(correctChoices: number[]): void {\r\n        const numChoices = this.choiceInputs.length;\r\n        let numCorrect = 0;\r\n        let numIncorrect = 0;\r\n        for (const input of this.choiceInputs) {\r\n            if (input.getAttribute(\"data-correctness\") === \"correct\") {\r\n                numCorrect++;\r\n            } else if (input.getAttribute(\"data-correctness\") === \"incorrect\") {\r\n                numIncorrect++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public scoreCorrectness(numChoices: number, numCorrect: number, numIncorrect: number): number {\r\n\r\n        // TODO: To calculate the intended score for multiple-select questions, the selection order is required.\r\n        // Selecting (incorrect, correct, correct) should yield a different score than (correct, incorrect, correct).\r\n        // If we score each time a correct choice is selected, we can give points based on the current state without needing to know the history.\r\n\r\n        // Calculate score based on the number of correct and incorrect choices\r\n        const numAttempts = numCorrect + numIncorrect;\r\n        if (numAttempts === 0) {\r\n            return 0; // No attempts made\r\n        }\r\n        const score = (numCorrect / numAttempts) * 100; // PLACEHOLDER FUNCTION\r\n        return score;\r\n    }\r\n\r\n    public scoreOnCorrectChoiceSelected(): number {\r\n        // This assumes that a correct choice was just selected, so only call it after a correct choice is selected **and marked correct**.\r\n        // Score = 1 - (numHiddenCorrectChoices / numHiddenChoices)\r\n        const numCorrectChoices = this.correctChoices.length;\r\n        const numRevealedCorrectChoices = Array.from(this.choiceInputs).filter(input => input.getAttribute(\"data-correctness\") === \"correct\").length;\r\n        const numHiddenCorrectChoices = numCorrectChoices - numRevealedCorrectChoices + 1;\r\n        const numHiddenChoices = Array.from(this.choiceInputs).filter(input => input.getAttribute(\"data-correctness\") === \"hidden\").length + 1;\r\n        const score = 1 - (numHiddenCorrectChoices / numHiddenChoices);\r\n        debug(\"%s: Scoring from a correct choice selection. 1 - (numHiddenCorrectChoices / numHiddenChoices): 1 - (%d / %d) = %s.\", this.questionId, numHiddenCorrectChoices, numHiddenChoices, score.toFixed(2));\r\n        updateComprehensionScores(this.qContext, score);\r\n        return score\r\n    }\r\n\r\n    public checkAllChoicesRequired(event: Event, requiredChoices: number[]): boolean {\r\n        // TODO: Update so that this also checks that \"required false\" choices are not selected. Implicitly, this is every choice that isn't in requiredChoices.\r\n        debug(\"Checking required choices for %s:\", this.questionId);\r\n        const selectedChoices = this.qContext.getSelectedChoices().map(Number);\r\n        if (requiredChoices.every(choice => selectedChoices.includes(choice))) {\r\n            debug(\"All required choices selected for questionId: %s\", this.questionId);\r\n            // this.nextButtonManager.setQuestionPassState(this.qContext, true);\r\n            return true;\r\n        } else {\r\n            debug(\"Not all required choices selected for questionId: %s\", this.questionId);\r\n            // this.nextButtonManager.setQuestionPassState(this.qContext, false);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public saveChoiceStates(): void {\r\n        const choiceHistory: Record<string, ChoiceState> = {};\r\n\r\n        for (const input of this.choiceInputs) {\r\n            const choiceId = input.id.split(\"-\").pop()!;\r\n            choiceHistory[choiceId] = {\r\n                correctness: input.getAttribute(\"data-correctness\") as \"correct\" | \"incorrect\" | \"hidden\",\r\n                selected: input.checked,\r\n                disabled: input.disabled,\r\n            };\r\n        }\r\n\r\n        saveSessionJson(this.questionId + \"_choiceHistory\", choiceHistory);\r\n        debug(\"Saved choiceStates for %s: %o\", this.questionId, choiceHistory);\r\n    }\r\n\r\n    public loadChoiceStates(): void {\r\n        const history = loadSessionJson(this.questionId + \"_choiceHistory\") ?? {};\r\n\r\n        for (const input of this.choiceInputs) {\r\n            const choiceId = input.id.split(\"-\").pop()!;\r\n            const state = history[choiceId] as ChoiceState | undefined;\r\n\r\n            if (state) {\r\n                input.setAttribute(\"data-correctness\", state.correctness);\r\n                input.checked = state.selected;\r\n                input.disabled = state.disabled;\r\n            } else {\r\n                input.setAttribute(\"data-correctness\", \"hidden\");\r\n                input.checked = false;\r\n                input.disabled = false;\r\n            }\r\n\r\n            this.qContext.setChoiceAnswerValue(choiceId, choiceId, input.checked);\r\n        }\r\n        debug(\"Loaded choiceStates for %s: %o\", this.questionId, history);\r\n    }\r\n\r\n}\r\n\r\ninterface ChoiceState {\r\n    correctness: \"correct\" | \"incorrect\" | \"hidden\";\r\n    selected: boolean;\r\n    disabled: boolean;\r\n}\r\n\r\ntype ChoiceStates = Record<string, ChoiceState>;\r\n\r\nexport function updateComprehensionScores(qContext: any, score: number): void {\r\n    let comprehensionScores = loadSessionJson(\"comprehensionScores\") || {};\r\n    const questionId = normalizeQuestionId(qContext.questionId);\r\n    if (!comprehensionScores[questionId]) {\r\n        comprehensionScores[questionId] = [];\r\n    }\r\n    comprehensionScores[questionId].push(score);\r\n    saveSessionJson(\"comprehensionScores\", comprehensionScores);\r\n    debug(\"Updated comprehension scores for %s: %o\", questionId, comprehensionScores[questionId]);\r\n}\r\n", "import { normalizeQuestionId } from \"./qualtricsUtils\";\r\nimport { saveSessionJson, loadSessionJson, transferSessionDataToEmbeddedData } from \"./storageUtils\";\r\nimport { NextButtonManager } from \"./nextButtonManager\";\r\nimport debugLib from \"debug\";\r\nconst debug = debugLib(\"svlib:questionEventUtils\");\r\n\r\ndeclare const Qualtrics: any;\r\n\r\n\r\nexport function enableQuestionChoiceLogger(qContext: any): void {\r\n    // Usage: svlib.enableQuestionChoiceLogger(this);\r\n    const handler = new QuestionChoiceListener(qContext, [\r\n        (event: Event) => handler.logEvent(event)\r\n    ]);\r\n    handler.init();\r\n    debug(\"Enabled question choice logger for %s.\", qContext.questionId);\r\n}\r\n\r\n\r\nexport class QuestionChoiceListener {\r\n    private qContext: any\r\n    public callbacks: Array<(event: Event) => void>; // Renamed for clarity\r\n    private questionId: string;\r\n    private choiceInputs: NodeListOf<HTMLInputElement>;\r\n\r\n    constructor(qContext: any, callbacks: Array<(event: Event) => void>) {\r\n\r\n        localStorage.setItem(\"debug\", \"svlib:questionEventUtils\"); // Enables debug logging for this class\r\n\r\n        this.qContext = qContext;\r\n        this.callbacks = callbacks;\r\n        this.questionId = normalizeQuestionId(qContext.questionId);\r\n        const questionContainer = qContext.getQuestionContainer();\r\n        const choiceContainer = qContext.getChoiceContainer();\r\n        this.choiceInputs = choiceContainer.querySelectorAll(\"input[type='radio'], input[type='checkbox']\");\r\n    }\r\n\r\n    public init(): void {\r\n        // this.attachChoiceListeners(\"click\", this.callbacks);\r\n    }\r\n\r\n    private attachEventListener(eventType: string): void {\r\n        const questionContainer = this.qContext.getQuestionContainer();\r\n        if (!questionContainer) {\r\n            console.error(\"No question container found for questionId: %s\", this.questionId);\r\n            return;\r\n        }\r\n        questionContainer.addEventListener(eventType, (event: Event) => {\r\n            this.logEvent(event);\r\n        });\r\n\r\n        debug(\"Attached %s event listener to questionId: %s\", eventType, this.questionId);\r\n    }\r\n\r\n    \r\n\r\n    public logEvent(event: Event): void {\r\n        const eventData = {\r\n            targetId: (event.target as HTMLInputElement).id,\r\n            choiceId: (event.target as HTMLInputElement).id.split(\"-\").pop()!,\r\n            eventType: event.type,\r\n            timestamp: new Date().toISOString(),\r\n        };\r\n        debug(\"Event triggered: %o\", eventData);\r\n        debug(\"Event: %o\", event);\r\n    }\r\n}\r\n\r\n", "import { normalizeQuestionId } from \"./qualtricsUtils\";\r\nimport { saveSessionJson, loadSessionJson, transferSessionDataToEmbeddedData } from \"./storageUtils\";\r\nimport debugLib from \"debug\";\r\nconst debug = debugLib(\"svlib:questionTimer\");\r\ndeclare const Qualtrics: any;\r\n\r\nexport function enableQuestionTimer(this: any, interval: number = 1, timeLimit: number = 0, enforceFocus: boolean = false, displayTimer: boolean = false): void {\r\n    // Usage: svlib.enableQuestionTimer(this);\r\n    // const timer = new TimeLimitTimer(this, interval, timeLimit, () => {\r\n    //     debug(\"Time limit reached for question %s, executing onTimeUp callback.\", this.questionId);\r\n    //     this.onTimeUp();\r\n    // });\r\n\r\n    const timer = new TimeLimitTimer(this, interval, timeLimit);\r\n    timer.init();\r\n\r\n\r\n}\r\n\r\nexport class TimeLimitTimer {\r\n    private qContext: any;\r\n    private questionId: string;\r\n    private interval: number;\r\n    private timeLimit: number;\r\n    private intervalId: number | null = null;\r\n    private startTime: number;\r\n    private elapsedTime: number;\r\n    private penaltyCount: number = 0;\r\n\r\n    constructor(qContext: any, interval: number, timeLimit: number) {\r\n        this.qContext = qContext;\r\n        this.questionId = normalizeQuestionId(this.qContext.questionId);\r\n        this.interval = interval * 1000; // Convert seconds to milliseconds\r\n        this.timeLimit = timeLimit * 1000; // Convert seconds to milliseconds\r\n        this.startTime = Date.now();\r\n        this.elapsedTime = 0;\r\n    }\r\n\r\n    public init(): void {\r\n\r\n        localStorage.setItem(\"debug\", \"svlib:questionTimeLimit\"); // Enables debug logging for this class\r\n\r\n        // Load saved timer state if available\r\n        const savedState = loadSessionJson(this.questionId + \"_timer\");\r\n        if (savedState) {\r\n            this.startTime = savedState.startTime;\r\n            this.elapsedTime = savedState.elapsedTime;\r\n            this.penaltyCount = savedState.penaltyCount;\r\n            debug(\"Loaded saved timer state for question %s: %o\", this.questionId, savedState);\r\n        } else {\r\n            debug(\"No saved timer state found for question %s; starting new timer.\", this.questionId);\r\n        }\r\n        \r\n        this.start();\r\n\r\n    }\r\n\r\n    public start(): void {\r\n        this.startTime = Date.now();\r\n        this.intervalId = window.setInterval(() => {\r\n            this.onTick();\r\n        }, this.interval);\r\n    }\r\n\r\n    public stop(): void {\r\n        if (this.intervalId) {\r\n            this.elapsedTime += Date.now() - this.startTime;\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n        }\r\n    }\r\n\r\n    private onTick(): void {\r\n        const now = Date.now();\r\n        this.elapsedTime += now - this.startTime;\r\n        this.startTime = now;\r\n        this.saveTimerState();\r\n\r\n        if (this.elapsedTime >= this.timeLimit) {\r\n            this.stop();\r\n            this.forceAdvance();\r\n            debug(\"Time limit reached for question %s.\", this.questionId);\r\n        }\r\n    }\r\n\r\n    public saveTimerState(): void {\r\n        const state = {\r\n            startTime: this.startTime,\r\n            elapsedTime: this.elapsedTime,\r\n            penaltyCount: this.penaltyCount,\r\n        };\r\n        saveSessionJson(this.questionId + \"_timer\", state);\r\n        debug(\"Saved timer state for question %s: %o\", this.questionId, state);\r\n    }\r\n\r\n    public forceAdvance(): void {\r\n        this.stop();\r\n        this.qContext.clickNextButton();\r\n        debug(\"Forced advance for question %s.\", this.questionId);\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["require_ms", "__commonJSMin", "exports", "module", "s", "m", "h", "d", "w", "y", "val", "options", "type", "parse", "fmtLong", "fmtShort", "str", "match", "n", "ms", "msAbs", "plural", "name", "isPlural", "require_common", "__commonJSMin", "exports", "module", "setup", "env", "createDebug", "coerce", "disable", "enable", "enabled", "destroy", "key", "selectColor", "namespace", "hash", "i", "prevTime", "enableOverride", "namespacesCache", "enabledCache", "debug", "args", "self", "curr", "ms", "index", "match", "format", "formatter", "val", "extend", "v", "delimiter", "newDebug", "namespaces", "split", "ns", "matchesTemplate", "search", "template", "searchIndex", "templateIndex", "starIndex", "matchIndex", "name", "skip", "require_browser", "__commonJSMin", "exports", "module", "formatArgs", "save", "load", "useColors", "localstorage", "warned", "m", "args", "c", "index", "lastC", "match", "namespaces", "r", "formatters", "v", "error", "main_exports", "__export", "NextButtonManager", "describeThisQuestion", "enableComprehensionQuestion", "enableFeedbackOnQuestion", "enableQuestionChoiceLogger", "enableQuestionTimer", "recordData", "storeAllSessionFeedbackAsEmbeddedData", "testDataPersistence", "describeThisQuestion", "qContext", "questionId", "questionInfo", "questionChoices", "normalizeQuestionId", "testDataPersistence", "qContext", "questionId", "sessionData", "localData", "saveSessionJson", "key", "data", "jsonString", "error", "loadSessionJson", "enableFeedbackOnQuestion", "qContext", "options", "FeedbackOnQuestion", "DEFAULTS", "normalizeQuestionId", "questionContainer", "e", "isOpen", "offset", "key", "val", "saved", "storeAllSessionFeedbackAsEmbeddedData", "feedbackKeys", "feedbackData", "questionId", "feedback", "error", "import_debug", "debug", "debugLib", "NextButtonManager", "_NextButtonManager", "qContext", "question", "normalizeQuestionId", "questionId", "q", "passed", "import_debug", "debug", "debugLib", "enableComprehensionQuestion", "qContext", "correctChoices", "requiredChoices", "ComprehensionQuestion", "normalizeQuestionId", "NextButtonManager", "callbacks", "event", "eventType", "input", "cb", "choiceId", "selectedChoices", "choice", "numChoices", "numCorrect", "numIncorrect", "numAttempts", "numCorrectChoices", "numRevealedCorrectChoices", "numHiddenCorrectChoices", "numHiddenChoices", "score", "updateComprehensionScores", "choiceHistory", "saveSessionJson", "history", "loadSessionJson", "state", "comprehensionScores", "questionId", "import_debug", "debug", "debugLib", "enableQuestionChoiceLogger", "qContext", "handler", "QuestionChoiceListener", "event", "callbacks", "normalizeQuestionId", "questionContainer", "choiceContainer", "eventType", "eventData", "import_debug", "debug", "debugLib", "enableQuestionTimer", "interval", "timeLimit", "enforceFocus", "displayTimer", "TimeLimitTimer", "qContext", "normalizeQuestionId", "savedState", "loadSessionJson", "now", "state", "saveSessionJson", "recordData", "data"]
}
